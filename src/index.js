// Generated by CoffeeScript 2.6.1
var AddRowView, AppView, PHONE_RE, Router, RowView, User, UserList, appView, arraytoObj, router, userList;

import './normalize.css';

import './index.css';

PHONE_RE = RegExp("^([+]?[\s0-9]+)?(\d{3}|[(]?[0-9]+[)])?([-]?[\s]?[0-9])+$");

arraytoObj = function(arr) {
  var i, k, len, obj, v;
  obj = {};
  for (i = 0, len = arr.length; i < len; i++) {
    [k, v] = arr[i];
    obj[k] = v;
  }
  return obj;
};

User = Backbone.Model.extend({
  defaults: {
    name: '',
    phone: ''
  },
  validate: function(attrs, options) {
    var f, reqErrs;
    reqErrs = (function() {
      var i, len, ref, results;
      ref = ['name', 'phone'];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        f = ref[i];
        if (!attrs[f]) {
          results.push([f, `Не зполнено поле: ${f}`]);
        }
      }
      return results;
    })();
    if (reqErrs) {
      return reqErrs;
    }
    if (!PHONE_RE.test(attrs.phone)) {
      return [['phone', "Телефон указан некорректно"]];
    }
  }
});

UserList = Backbone.Collection.extend({
  model: User,
  localStorage: new Backbone.LocalStorage('UserStore')
});

RowView = Backbone.View.extend({
  initialize: function() {
    this.edit = false;
    this.model.on('change', this.render, this);
    this.model.on('destroy', this.remove, this);
  },
  el: '#user-list',
  template: _.template($('#item-template').html()),
  render: function() {
    this.$el.html(this.template(_.extend({
      edit: this.edit
    }, this.model.attributes)));
    return this;
  },
  events: {
    'dblclick label': 'edit',
    'keypress .edit': 'updateOnEnter',
    'blur .edit': 'close',
    'click .edit': 'edit',
    'click .destroy': 'destroy'
  },
  edit: function() {
    var inp;
    this.edit = true;
    //@$el.addClass 'editing'
    inp = document.querySelector('input');
    if (inp) {
      inp.focus();
    }
  },
  updateOnEnter: function(e) {
    if (e.which === 13) {
      this.close();
    }
  },
  close: function() {
    var value;
    value = this.input.val().trim();
    if (value) {
      this.model.save({
        title: value
      });
    }
    this.$el.removeClass('editing');
  },
  edit: function() {
    console.log("edit!");
  },
  destroy: function() {
    console.log("destroy!");
    this.model.destroy();
  }
});

AddRowView = Backbone.View.extend({
  initialize: function() {
    this.edit = false;
  },
  el: '#add-row',
  template: _.template($('#addrow-template').html()),
  render: function(errs = {}) {
    this.$el.html(this.template(_.extend({
      edit: this.edit,
      errs
    }, this.model.attributes)));
    return this;
  },
  events: {
    'keypress .edit': 'updateOnEnter',
    'click .add': 'edit',
    'click .save': 'save',
    'click .cancel': 'cancel'
  },
  edit: function() {
    var inp;
    this.edit = true;
    this.render();
    inp = document.querySelector('input');
    if (inp) {
      inp.focus();
    }
  },
  cancel: function() {
    this.edit = false;
    this.render();
    this.model.reset();
  },
  updateOnEnter: function(e) {
    if (e.which === 13) {
      this.close();
    }
  },
  save: function() {
    var errs, f, name, phone, r;
    [name, phone] = (function() {
      var i, len, ref, results;
      ref = ["name", "phone"];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        f = ref[i];
        results.push(document.querySelector(`[name=${f}]`).value);
      }
      return results;
    })();
    r = this.model.set({name, phone}, {
      validate: true,
      silent: true
    });
    if (r) {
      userList.add(this.model);
      userList.save();
      this.edit = false;
      this.render();
    } else {
      errs = this.model.validationError;
      this.render(arrayToObj(errs));
    }
  }
});

AppView = Backbone.View.extend({
  el: '#app',
  initialize: async function() {
    this.nodataTemplate = _.template($('#nodata-template').html());
    $('#add-row').append((new AddRowView({
      model: new User()
    })).render().el);
    userList.on('add', this.addAll, this);
    userList.on('reset', this.addAll, this);
    userList.on('remove', this.removeOne, this);
    userList.on('sync', this.checkEmpty, this);
    await userList.fetch();
  },
  addOne: function(model) {
    var view;
    view = new RowView({
      model: model
    });
    $('#user-list').append(view.render().el);
  },
  checkEmpty: function() {
    if (userList.length === 0) {
      $('#user-list').html(this.nodataTemplate());
    }
  },
  removeOne: function() {
    this.checkEmpty();
  },
  addAll: function() {
    var u, usersHtml;
    if (userList.length > 0) {
      usersHtml = (function() {
        var i, len, ref, results;
        ref = userList.models;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          u = ref[i];
          results.push((new RowView({
            model: u
          })).render().el.innerHTML);
        }
        return results;
      })();
      $('#user-list').html(usersHtml);
    }
  }
});

userList = new UserList();

Router = Backbone.Router.extend({
  routes: {
    ':filter': 'setFilter'
  },
  setFilter: function(params) {
    window.filter = params.trim() || '';
    userList.trigger('reset');
  }
});

router = new Router();

Backbone.history.start();

appView = new AppView();
